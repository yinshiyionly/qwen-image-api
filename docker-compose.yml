version: '3.8'

services:
  qwen-image-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: qwen-image-api
    ports:
      - "8000:8000"
    environment:
      # 服务器配置
      - QWEN_SERVER_HOST=0.0.0.0
      - QWEN_SERVER_PORT=8000
      - QWEN_SERVER_MAX_CONCURRENT_REQUESTS=4
      
      # 模型配置
      - QWEN_MODEL_DEVICE=cpu
      - QWEN_MODEL_TORCH_DTYPE=float32
      
      # 日志配置
      - QWEN_LOG_LEVEL=INFO
      - QWEN_LOG_FILE_PATH=/app/logs/qwen-api.log
      
      # 安全配置
      - QWEN_SECURITY_ENABLE_RATE_LIMIT=true
      - QWEN_SECURITY_RATE_LIMIT_PER_MINUTE=60
    volumes:
      # 配置文件挂载
      - ./config.yaml:/app/config.yaml:ro
      # 日志目录挂载
      - ./logs:/app/logs
      # 模型文件挂载（如果有本地模型）
      - ./models:/app/models:ro
      # 临时文件目录
      - ./tmp:/app/tmp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          # 限制内存使用（根据实际需求调整）
          memory: 4G
        reservations:
          memory: 2G
    networks:
      - qwen-network

  # Redis 服务（可选，用于缓存和速率限制）
  redis:
    image: redis:7-alpine
    container_name: qwen-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - qwen-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Nginx 反向代理（可选，用于生产环境）
  nginx:
    image: nginx:alpine
    container_name: qwen-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - qwen-image-api
    restart: unless-stopped
    networks:
      - qwen-network

volumes:
  redis_data:
    driver: local

networks:
  qwen-network:
    driver: bridge